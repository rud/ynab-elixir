# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule YNAB.Api.Transactions do
  @moduledoc """
  API calls for all endpoints tagged `Transactions`.
  """

  alias YNAB.Connection
  import YNAB.RequestBuilder

  @doc """
  Create a single transaction or multiple transactions
  Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `data` (PostTransactionsWrapper): The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, YNAB.Model.SaveTransactionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_transaction(
          Tesla.Env.client(),
          String.t(),
          YNAB.Model.PostTransactionsWrapper.t(),
          keyword()
        ) ::
          {:ok, YNAB.Model.SaveTransactionsResponse.t()}
          | {:ok, YNAB.Model.ErrorResponse.t()}
          | {:error, Tesla.Env.t()}
  def create_transaction(connection, budget_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/budgets/#{budget_id}/transactions")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, YNAB.Model.SaveTransactionsResponse},
      {400, YNAB.Model.ErrorResponse},
      {409, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  Deletes an existing transaction
  Deletes a transaction

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `transaction_id` (String.t): The id of the transaction
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, YNAB.Model.TransactionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_transaction(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.TransactionResponse.t()}
          | {:ok, YNAB.Model.ErrorResponse.t()}
          | {:error, Tesla.Env.t()}
  def delete_transaction(connection, budget_id, transaction_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/budgets/#{budget_id}/transactions/#{transaction_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.TransactionResponse},
      {404, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  Single transaction
  Returns a single transaction

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `transaction_id` (String.t): The id of the transaction
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, YNAB.Model.TransactionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_transaction_by_id(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.TransactionResponse.t()}
          | {:ok, YNAB.Model.ErrorResponse.t()}
          | {:error, Tesla.Env.t()}
  def get_transaction_by_id(connection, budget_id, transaction_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/budgets/#{budget_id}/transactions/#{transaction_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.TransactionResponse},
      {404, YNAB.Model.ErrorResponse},
      {:default, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  List transactions
  Returns budget transactions, excluding any pending transactions

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `opts` (keyword): Optional parameters
    - `:since_date` (Date.t): If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
    - `:type` (String.t): If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
    - `:last_knowledge_of_server` (integer()): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.

  ### Returns

  - `{:ok, YNAB.Model.TransactionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_transactions(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, YNAB.Model.ErrorResponse.t()}
          | {:ok, YNAB.Model.TransactionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def get_transactions(connection, budget_id, opts \\ []) do
    optional_params = %{
      :since_date => :query,
      :type => :query,
      :last_knowledge_of_server => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/budgets/#{budget_id}/transactions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.TransactionsResponse},
      {400, YNAB.Model.ErrorResponse},
      {404, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  List account transactions
  Returns all transactions for a specified account, excluding any pending transactions

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `account_id` (String.t): The id of the account
  - `opts` (keyword): Optional parameters
    - `:since_date` (Date.t): If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
    - `:type` (String.t): If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
    - `:last_knowledge_of_server` (integer()): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.

  ### Returns

  - `{:ok, YNAB.Model.TransactionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_transactions_by_account(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.ErrorResponse.t()}
          | {:ok, YNAB.Model.TransactionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def get_transactions_by_account(connection, budget_id, account_id, opts \\ []) do
    optional_params = %{
      :since_date => :query,
      :type => :query,
      :last_knowledge_of_server => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/budgets/#{budget_id}/accounts/#{account_id}/transactions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.TransactionsResponse},
      {404, YNAB.Model.ErrorResponse},
      {:default, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  List category transactions, excluding any pending transactions
  Returns all transactions for a specified category

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `category_id` (String.t): The id of the category
  - `opts` (keyword): Optional parameters
    - `:since_date` (Date.t): If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
    - `:type` (String.t): If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
    - `:last_knowledge_of_server` (integer()): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.

  ### Returns

  - `{:ok, YNAB.Model.HybridTransactionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_transactions_by_category(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.ErrorResponse.t()}
          | {:ok, YNAB.Model.HybridTransactionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def get_transactions_by_category(connection, budget_id, category_id, opts \\ []) do
    optional_params = %{
      :since_date => :query,
      :type => :query,
      :last_knowledge_of_server => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/budgets/#{budget_id}/categories/#{category_id}/transactions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.HybridTransactionsResponse},
      {404, YNAB.Model.ErrorResponse},
      {:default, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  List payee transactions, excluding any pending transactions
  Returns all transactions for a specified payee

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `payee_id` (String.t): The id of the payee
  - `opts` (keyword): Optional parameters
    - `:since_date` (Date.t): If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
    - `:type` (String.t): If specified, only transactions of the specified type will be included. \"uncategorized\" and \"unapproved\" are currently supported.
    - `:last_knowledge_of_server` (integer()): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.

  ### Returns

  - `{:ok, YNAB.Model.HybridTransactionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_transactions_by_payee(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.ErrorResponse.t()}
          | {:ok, YNAB.Model.HybridTransactionsResponse.t()}
          | {:error, Tesla.Env.t()}
  def get_transactions_by_payee(connection, budget_id, payee_id, opts \\ []) do
    optional_params = %{
      :since_date => :query,
      :type => :query,
      :last_knowledge_of_server => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/budgets/#{budget_id}/payees/#{payee_id}/transactions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.HybridTransactionsResponse},
      {404, YNAB.Model.ErrorResponse},
      {:default, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  Import transactions
  Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \"Import\" on each account in the web application or tapping the \"New Transactions\" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, YNAB.Model.TransactionsImportResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec import_transactions(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, YNAB.Model.TransactionsImportResponse.t()}
          | {:ok, YNAB.Model.ErrorResponse.t()}
          | {:error, Tesla.Env.t()}
  def import_transactions(connection, budget_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/budgets/#{budget_id}/transactions/import")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.TransactionsImportResponse},
      {201, YNAB.Model.TransactionsImportResponse},
      {400, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  Updates an existing transaction
  Updates a single transaction

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `transaction_id` (String.t): The id of the transaction
  - `data` (PutTransactionWrapper): The transaction to update
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, YNAB.Model.TransactionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_transaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          YNAB.Model.PutTransactionWrapper.t(),
          keyword()
        ) ::
          {:ok, YNAB.Model.TransactionResponse.t()}
          | {:ok, YNAB.Model.ErrorResponse.t()}
          | {:error, Tesla.Env.t()}
  def update_transaction(connection, budget_id, transaction_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/budgets/#{budget_id}/transactions/#{transaction_id}")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.TransactionResponse},
      {400, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  Update multiple transactions
  Updates multiple transactions, by `id` or `import_id`.

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `data` (PatchTransactionsWrapper): The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by its `import_id`. If an `id` is specified, it will always be used for lookup.  You should not specify both `id` and `import_id`.  Updating an `import_id` on an existing transaction is not allowed; if an `import_id` is specified, it will only be used to lookup the transaction.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, YNAB.Model.SaveTransactionsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_transactions(
          Tesla.Env.client(),
          String.t(),
          YNAB.Model.PatchTransactionsWrapper.t(),
          keyword()
        ) ::
          {:ok, YNAB.Model.SaveTransactionsResponse.t()}
          | {:ok, YNAB.Model.ErrorResponse.t()}
          | {:error, Tesla.Env.t()}
  def update_transactions(connection, budget_id, data, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/budgets/#{budget_id}/transactions")
      |> add_param(:body, :body, data)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {209, YNAB.Model.SaveTransactionsResponse},
      {400, YNAB.Model.ErrorResponse}
    ])
  end
end
