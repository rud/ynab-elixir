# NOTE: This file is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit manually.

defmodule YNAB.Api.Transactions do
  @moduledoc """
  API calls for all endpoints tagged `Transactions`.
  """
  alias YNAB.Client
  import YNAB.RequestBuilder

  @doc """
  Bulk create transactions
  Creates multiple transactions

  ## Parameters

  - client (YNAB.Client): Connection to server
  - budget_id (String.t): The ID of the Budget.
  - transactions (BulkTransactions): The list of Transactions to create.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %YNAB.Model.BulkResponse{}} on success
  {:error, info} on failure
  """
  @spec bulk_create_transactions(
          Tesla.Env.client(),
          String.t(),
          YNAB.Model.BulkTransactions.t(),
          keyword()
        ) :: {:ok, YNAB.Model.BulkResponse.t()} | {:error, Tesla.Env.t()}
  def bulk_create_transactions(client, budget_id, transactions, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/budgets/#{budget_id}/transactions/bulk")
    |> add_param(:body, :transactions, transactions)
    |> Enum.into([])
    |> (&Client.request(client, &1)).()
    |> decode(%YNAB.Model.BulkResponse{})
  end

  @doc """
  Create new transaction
  Creates a transaction

  ## Parameters

  - client (YNAB.Client): Connection to server
  - budget_id (String.t): The ID of the Budget.
  - transaction (SaveTransactionWrapper): The Transaction to create.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %YNAB.Model.TransactionResponse{}} on success
  {:error, info} on failure
  """
  @spec create_transaction(
          Tesla.Env.client(),
          String.t(),
          YNAB.Model.SaveTransactionWrapper.t(),
          keyword()
        ) :: {:ok, YNAB.Model.TransactionResponse.t()} | {:error, Tesla.Env.t()}
  def create_transaction(client, budget_id, transaction, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/budgets/#{budget_id}/transactions")
    |> add_param(:body, :transaction, transaction)
    |> Enum.into([])
    |> (&Client.request(client, &1)).()
    |> decode(%YNAB.Model.TransactionResponse{})
  end

  @doc """
  List transactions
  Returns budget transactions

  ## Parameters

  - client (YNAB.Client): Connection to server
  - budget_id (String.t): The ID of the Budget.
  - opts (KeywordList): [optional] Optional parameters
    - :since_date (Date.t): Only return transactions on or after this date.
    - :type (String.t): Only return transactions of a certain type (i.e. &#39;uncategorized&#39;, &#39;unapproved&#39;)

  ## Returns

  {:ok, %YNAB.Model.TransactionsResponse{}} on success
  {:error, info} on failure
  """
  @spec get_transactions(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, YNAB.Model.TransactionsResponse.t()} | {:error, Tesla.Env.t()}
  def get_transactions(client, budget_id, opts \\ []) do
    optional_params = %{
      since_date: :query,
      type: :query
    }

    %{}
    |> method(:get)
    |> url("/budgets/#{budget_id}/transactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Client.request(client, &1)).()
    |> decode(%YNAB.Model.TransactionsResponse{})
  end

  @doc """
  List account transactions
  Returns all transactions for a specified account

  ## Parameters

  - client (YNAB.Client): Connection to server
  - budget_id (String.t): The ID of the Budget.
  - account_id (String.t): The ID of the Account.
  - opts (KeywordList): [optional] Optional parameters
    - :since_date (Date.t): Only return transactions on or after this date.

  ## Returns

  {:ok, %YNAB.Model.TransactionsResponse{}} on success
  {:error, info} on failure
  """
  @spec get_transactions_by_account(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.TransactionsResponse.t()} | {:error, Tesla.Env.t()}
  def get_transactions_by_account(client, budget_id, account_id, opts \\ []) do
    optional_params = %{
      since_date: :query
    }

    %{}
    |> method(:get)
    |> url("/budgets/#{budget_id}/accounts/#{account_id}/transactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Client.request(client, &1)).()
    |> decode(%YNAB.Model.TransactionsResponse{})
  end

  @doc """
  List category transactions
  Returns all transactions for a specified category

  ## Parameters

  - client (YNAB.Client): Connection to server
  - budget_id (String.t): The ID of the Budget.
  - category_id (String.t): The ID of the Category.
  - opts (KeywordList): [optional] Optional parameters
    - :since_date (Date.t): Only return transactions on or after this date.

  ## Returns

  {:ok, %YNAB.Model.HybridTransactionsResponse{}} on success
  {:error, info} on failure
  """
  @spec get_transactions_by_category(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.HybridTransactionsResponse.t()} | {:error, Tesla.Env.t()}
  def get_transactions_by_category(client, budget_id, category_id, opts \\ []) do
    optional_params = %{
      since_date: :query
    }

    %{}
    |> method(:get)
    |> url("/budgets/#{budget_id}/categories/#{category_id}/transactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Client.request(client, &1)).()
    |> decode(%YNAB.Model.HybridTransactionsResponse{})
  end

  @doc """
  Single transaction
  Returns a single transaction

  ## Parameters

  - client (YNAB.Client): Connection to server
  - budget_id (String.t): The ID of the Budget.
  - transaction_id (String.t): The ID of the Transaction.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %YNAB.Model.TransactionResponse{}} on success
  {:error, info} on failure
  """
  @spec get_transactions_by_id(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.TransactionResponse.t()} | {:error, Tesla.Env.t()}
  def get_transactions_by_id(client, budget_id, transaction_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/budgets/#{budget_id}/transactions/#{transaction_id}")
    |> Enum.into([])
    |> (&Client.request(client, &1)).()
    |> decode(%YNAB.Model.TransactionResponse{})
  end

  @doc """
  List payee transactions
  Returns all transactions for a specified payee

  ## Parameters

  - client (YNAB.Client): Connection to server
  - budget_id (String.t): The ID of the Budget.
  - payee_id (String.t): The ID of the Payee.
  - opts (KeywordList): [optional] Optional parameters
    - :since_date (Date.t): Only return transactions on or after this date.

  ## Returns

  {:ok, %YNAB.Model.HybridTransactionsResponse{}} on success
  {:error, info} on failure
  """
  @spec get_transactions_by_payee(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, YNAB.Model.HybridTransactionsResponse.t()} | {:error, Tesla.Env.t()}
  def get_transactions_by_payee(client, budget_id, payee_id, opts \\ []) do
    optional_params = %{
      since_date: :query
    }

    %{}
    |> method(:get)
    |> url("/budgets/#{budget_id}/payees/#{payee_id}/transactions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Client.request(client, &1)).()
    |> decode(%YNAB.Model.HybridTransactionsResponse{})
  end

  @doc """
  Updates an existing transaction
  Updates a transaction

  ## Parameters

  - client (YNAB.Client): Connection to server
  - budget_id (String.t): The ID of the Budget.
  - transaction_id (String.t): The ID of the Transaction.
  - transaction (SaveTransactionWrapper): The Transaction to update.
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %YNAB.Model.TransactionResponse{}} on success
  {:error, info} on failure
  """
  @spec update_transaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          YNAB.Model.SaveTransactionWrapper.t(),
          keyword()
        ) :: {:ok, YNAB.Model.TransactionResponse.t()} | {:error, Tesla.Env.t()}
  def update_transaction(client, budget_id, transaction_id, transaction, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/budgets/#{budget_id}/transactions/#{transaction_id}")
    |> add_param(:body, :transaction, transaction)
    |> Enum.into([])
    |> (&Client.request(client, &1)).()
    |> decode(%YNAB.Model.TransactionResponse{})
  end
end
