# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule YNAB.Api.Budgets do
  @moduledoc """
  API calls for all endpoints tagged `Budgets`.
  """

  alias YNAB.Connection
  import YNAB.RequestBuilder

  @doc """
  Single budget
  Returns a single budget with all related entities.  This resource is effectively a full budget export.

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `opts` (keyword): Optional parameters
    - `:last_knowledge_of_server` (integer()): The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.

  ### Returns

  - `{:ok, YNAB.Model.BudgetDetailResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_budget_by_id(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, YNAB.Model.BudgetDetailResponse.t()}
          | {:ok, YNAB.Model.ErrorResponse.t()}
          | {:error, Tesla.Env.t()}
  def get_budget_by_id(connection, budget_id, opts \\ []) do
    optional_params = %{
      :last_knowledge_of_server => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/budgets/#{budget_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.BudgetDetailResponse},
      {404, YNAB.Model.ErrorResponse},
      {:default, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  Budget Settings
  Returns settings for a budget

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `budget_id` (String.t): The id of the budget. \"last-used\" can be used to specify the last used budget and \"default\" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, YNAB.Model.BudgetSettingsResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_budget_settings_by_id(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, YNAB.Model.ErrorResponse.t()}
          | {:ok, YNAB.Model.BudgetSettingsResponse.t()}
          | {:error, Tesla.Env.t()}
  def get_budget_settings_by_id(connection, budget_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/budgets/#{budget_id}/settings")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.BudgetSettingsResponse},
      {404, YNAB.Model.ErrorResponse},
      {:default, YNAB.Model.ErrorResponse}
    ])
  end

  @doc """
  List budgets
  Returns budgets list with summary information

  ### Parameters

  - `connection` (YNAB.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:include_accounts` (boolean()): Whether to include the list of budget accounts

  ### Returns

  - `{:ok, YNAB.Model.BudgetSummaryResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_budgets(Tesla.Env.client(), keyword()) ::
          {:ok, YNAB.Model.BudgetSummaryResponse.t()}
          | {:ok, YNAB.Model.ErrorResponse.t()}
          | {:error, Tesla.Env.t()}
  def get_budgets(connection, opts \\ []) do
    optional_params = %{
      :include_accounts => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/budgets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, YNAB.Model.BudgetSummaryResponse},
      {404, YNAB.Model.ErrorResponse},
      {:default, YNAB.Model.ErrorResponse}
    ])
  end
end
